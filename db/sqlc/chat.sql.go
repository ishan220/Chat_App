// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: chat.sql

package db

import (
	"context"
	"time"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chat( id,from_user,to_user,message,created_at) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, from_user, to_user, message, created_at
`

type CreateChatParams struct {
	ID        string    `json:"id"`
	FromUser  string    `json:"from_user"`
	ToUser    string    `json:"to_user"`
	Message   string    `json:"message"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChat,
		arg.ID,
		arg.FromUser,
		arg.ToUser,
		arg.Message,
		arg.CreatedAt,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const getChatHistory = `-- name: GetChatHistory :many
SELECT id, from_user, to_user, message, created_at FROM chat 
WHERE (from_user=$1  OR to_user=$1) 
AND (from_user=$2 OR to_user=$2)
`

type GetChatHistoryParams struct {
	FromUser   string `json:"from_user"`
	ToUser     string `json:"to_user"`
}

func (q *Queries) GetChatHistory(ctx context.Context, arg GetChatHistoryParams) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChatHistory, arg.FromUser, arg.ToUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
